{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { createContext, useState } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from \"../../src/BancoNoSql/conexaoFirebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var AuthContext = createContext({});\n\nfunction AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      AvaliarGp = _useState4[0],\n      setAvaliarGp = _useState4[1];\n\n  var navigation = useNavigation();\n\n  function login(email, password) {\n    return _regeneratorRuntime.async(function login$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(signInWithEmailAndPassword(auth, email, password).then(function (value) {\n              alert('loguin com sucesso!');\n              setUser({\n                userId: value.user.uid,\n                email: email\n              });\n              navigation.navigate('PainelControle');\n            }).catch(function (error) {\n              console.log(error);\n              var strr = error;\n\n              if (strr == \"FirebaseError: Firebase: Error (auth/wrong-password).\") {\n                alert(\"senha incorreta\");\n              }\n\n              if (strr == \"FirebaseError: Firebase: Error (auth/user-not-found).\") {\n                alert(\"E-mail não cadastrado!\");\n                setUser({\n                  erroSenha: 'erro email'\n                });\n              }\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsx(AuthContext.Provider, {\n    value: {\n      nome: \"grupo 3\",\n      login: login,\n      user: user\n    },\n    children: children\n  });\n}\n\nexport default AuthProvider;","map":{"version":3,"sources":["C:/Users/Usuário/Documents/megak/TCCreact-native/DiscalculiaHelper/src/contexts/auth.js"],"names":["React","createContext","useState","useNavigation","signInWithEmailAndPassword","auth","AuthContext","AuthProvider","children","user","setUser","AvaliarGp","setAvaliarGp","navigation","login","email","password","then","value","alert","userId","uid","navigate","catch","error","console","log","strr","erroSenha","nome"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA8C,OAA9C;AAEA,SAASC,aAAT,QAA8B,0BAA9B;AAEA,SAASC,0BAAT,QAA0C,eAA1C;AACA,SAASC,IAAT;;AAEA,OAAO,IAAMC,WAAW,GAAGL,aAAa,CAAC,EAAD,CAAjC;;AAEP,SAASM,YAAT,OAAiC;AAAA,MAAVC,QAAU,QAAVA,QAAU;;AAG7B,kBAAwBN,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOO,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAAkCR,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOS,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,UAAU,GAAGV,aAAa,EAAhC;;AAGA,WAAeW,KAAf,CAAqBC,KAArB,EAA2BC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACUZ,0BAA0B,CAACC,IAAD,EAAOU,KAAP,EAAaC,QAAb,CAA1B,CACLC,IADK,CACA,UAAAC,KAAK,EAAI;AACXC,cAAAA,KAAK,CAAC,qBAAD,CAAL;AACAT,cAAAA,OAAO,CAAC;AACJU,gBAAAA,MAAM,EAAGF,KAAK,CAACT,IAAN,CAAWY,GADhB;AAEJN,gBAAAA,KAAK,EAAGA;AAFJ,eAAD,CAAP;AAIAF,cAAAA,UAAU,CAACS,QAAX,CAAoB,gBAApB;AAGH,aAVK,EAWLC,KAXK,CAWC,UAAAC,KAAK,EAAI;AAACC,cAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACX,kBAAIG,IAAI,GAAGH,KAAX;;AACA,kBAAGG,IAAI,IAAI,uDAAX,EAAmE;AACnER,gBAAAA,KAAK,CAAC,iBAAD,CAAL;AAEC;;AACD,kBAAGQ,IAAI,IAAI,uDAAX,EAAmE;AACnER,gBAAAA,KAAK,CAAC,wBAAD,CAAL;AACAT,gBAAAA,OAAO,CAAC;AACNkB,kBAAAA,SAAS,EAAG;AADN,iBAAD,CAAP;AAGC;AAEN,aAxBK,CADV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA8BA,SACC,KAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACC,MAAAA,IAAI,EAAE,SAAP;AAAkBf,MAAAA,KAAK,EAALA,KAAlB;AAAyBL,MAAAA,IAAI,EAAJA;AAAzB,KAA7B;AAAA,cACKD;AADL,IADD;AAKH;;AAED,eAAeD,YAAf","sourcesContent":["import React, { createContext, useState} from 'react';\r\n\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nimport { signInWithEmailAndPassword} from 'firebase/auth';\r\nimport { auth } from '../../src/BancoNoSql/conexaoFirebase';\r\n\r\nexport const AuthContext = createContext({})\r\n\r\nfunction AuthProvider({children}){\r\n    \r\n\r\n    const [user, setUser] = useState({});\r\n    const [AvaliarGp, setAvaliarGp] = useState(false);\r\n\r\n    const navigation = useNavigation();\r\n\r\n\r\n    async function login(email,password){//Faz conexao com o banco, verifica se o email esta cadastrado e faz login\r\n        await signInWithEmailAndPassword(auth, email,password)\r\n        .then(value => {\r\n            alert('loguin com sucesso!');\r\n            setUser({\r\n                userId : value.user.uid,\r\n                email : email\r\n            })\r\n            navigation.navigate('PainelControle');\r\n            \r\n            \r\n        })\r\n        .catch(error => {console.log(error); //tratamento de erro de senha e email nao cadastrado\r\n              let strr = error;\r\n              if(strr == \"FirebaseError: Firebase: Error (auth/wrong-password).\"){\r\n              alert(\"senha incorreta\");\r\n             \r\n              }\r\n              if(strr == \"FirebaseError: Firebase: Error (auth/user-not-found).\"){\r\n              alert(\"E-mail não cadastrado!\")\r\n              setUser({\r\n                erroSenha : 'erro email'\r\n            })\r\n              }\r\n              \r\n        });\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n     <AuthContext.Provider value={{nome: \"grupo 3\", login, user}}>\r\n         {children}\r\n     </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthProvider;"]},"metadata":{},"sourceType":"module"}